{"version":3,"file":"static/js/711.dcd4bbfb.chunk.js","mappings":"qNACaA,EAAkBC,EAAAA,GAAAA,GAAH,oIASfC,EAAYD,EAAAA,GAAAA,GAAH,2hBAsBTE,EAAcF,EAAAA,GAAAA,IAAH,0MAYXG,EAAaH,EAAAA,GAAAA,EAAH,oL,SCbvB,EAtBkB,SAAC,GAAgB,IAAdI,EAAa,EAAbA,OACbC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAACP,EAAD,UACGK,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAd,OACV,SAACT,EAAD,WACE,UAAC,KAAD,CAAMU,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMR,GAA1C,WACE,SAACH,EAAD,CACEY,IACEJ,EAAW,yCAC2BA,GAClC,4DAENK,IAAG,gBAAWN,MAEhB,SAACN,EAAD,UAAaM,QAVDD,EADN,KAiBjB,C,0HCQD,UAjCa,WACX,OAA4CQ,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAAwCC,EAAAA,EAAAA,IAAgB,CAAEC,KAAM,IAAhE,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,GAASC,EAAAA,EAAAA,UACb,kBAAMC,OAAOC,aAAP,OAAuBL,GAA7B,GACA,CAACA,IAEGD,EAAOO,OAAOJ,EAAOH,MAAQ,GAenC,OAbAQ,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAEuBC,EAAAA,EAAAA,GAAkBT,GAFzC,OAEUU,EAFV,OAGIZ,EAAkBY,EAAKC,SAH3B,gDAKIC,QAAQC,IAAI,KAAMC,SALtB,0DADc,uBAAC,WAAD,wBASdC,GACAb,EAAgB,CAAEF,KAAAA,GACnB,GAAE,CAACA,EAAME,KAGR,iCACE,eAAIc,MAAO,CAAEC,WAAY,qCAAzB,6BAGA,SAAC,IAAD,CAAWjC,OAAQa,MAGxB,C,qHClCDqB,EAAAA,EAAAA,SAAAA,QAAA,+BACAA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAQ,oCAGV,IAAMV,EAAiB,mCAAG,2GAAOT,EAAP,+BAAc,EAAd,kBAECkB,EAAAA,EAAAA,IAAA,qBAAgC,CACrDf,OAAQ,CAAEH,KAAAA,KAHU,uBAEdU,EAFc,EAEdA,KAFc,kBAMfA,GANe,sCAQhB,IAAIU,MAAM,4BARM,yDAAH,qDAYjBC,EAAc,mCAAG,6GAAOrB,EAAP,+BAAc,EAAGsB,EAAjB,+BAAyB,GAAzB,kBAEIJ,EAAAA,EAAAA,IAAA,eAA0B,CAC/Cf,OAAQ,CACNH,KAAAA,EACAsB,MAAAA,KALe,uBAEXZ,EAFW,EAEXA,KAMRE,QAAQC,IAAIH,GARO,kBASZA,GATY,wCAWb,IAAIU,MAAM,4BAXG,0DAAH,oD","sources":["components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","pages/HomePage/Home.jsx","services/themoviedbAPI.js"],"sourcesContent":["import styled from 'styled-components';\nexport const MovieListStyled = styled.ul`\n  margin: 15px 0 60px 0;\n\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n  justify-content: center;\n`;\n\nexport const MovieItem = styled.li`\n  max-width: 100%;\n  height: 100%;\n  width: 260px;\n  padding: 8px;\n  cursor: pointer;\n  border-radius: 8px;\n  background-color: transparent;\n  border: none;\n  backdrop-filter: blur(3.5px);\n  box-shadow: rgba(0, 0, 0, 0.2) 0px 2px 4px -1px,\n    rgba(0, 0, 0, 0.14) 0px 4px 5px 0px, rgba(0, 0, 0, 0.12) 0px 1px 10px 0px;\n  transform: scale(1);\n  transition: transform 250ms linear 0s;\n  &:hover {\n    box-shadow: rgb(219 22 172 / 89%) 0px 2px 24px -5px;\n    transform: scale(1.05);\n  }\n  img {\n  }\n`;\n\nexport const MoviePoster = styled.img`\n  width: 100%;\n  height: 100%;\n  min-height: 100%;\n  height: 420px;\n  border-radius: 8px;\n\n  transform: scale(1);\n  object-fit: cover;\n  object-position: center center;\n`;\n\nexport const MovieTitle = styled.p`\n  margin-top: 15px;\n  color: whitesmoke;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  :hover {\n    color: orangered;\n  }\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n  MovieListStyled,\n  MovieItem,\n  MoviePoster,\n  MovieTitle,\n} from './MovieList.styled';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <MovieListStyled>\n      {movies.map(({ id, title, poster_path }) => (\n        <MovieItem key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            <MoviePoster\n              src={\n                poster_path\n                  ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                  : 'https://dummyimage.com/395x574/000/fff.jpg&text=no+poster'\n              }\n              alt={`Poster${title}`}\n            />\n            <MovieTitle>{title}</MovieTitle>\n          </Link>\n        </MovieItem>\n      ))}\n    </MovieListStyled>\n  );\n};\nexport default MovieList;\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useState, useEffect, useMemo } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getTrendingMovies } from 'services/themoviedbAPI';\nimport MovieList from '../../components/MovieList/MovieList';\n\nconst Home = () => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams({ page: 1 });\n\n  const params = useMemo(\n    () => Object.fromEntries([...searchParams]),\n    [searchParams]\n  );\n  const page = Number(params.page || 1);\n\n  useEffect(() => {\n    async function fetchTrending() {\n      try {\n        const data = await getTrendingMovies(page);\n        setTrendingMovies(data.results);\n      } catch (error) {\n        console.log(error.message);\n      }\n    }\n    fetchTrending();\n    setSearchParams({ page });\n  }, [page, setSearchParams]);\n\n  return (\n    <>\n      <h2 style={{ textShadow: '-6px 7px 6px rgba(34,17,153,0.47)' }}>\n        Trending today\n      </h2>\n      <MovieList movies={trendingMovies} />\n    </>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\naxios.defaults.params = {\n  api_key: `a06c90b50d50fe78eda7fc28090f9f2b`,\n};\n\nconst getTrendingMovies = async (page = 1) => {\n  try {\n    const { data } = await axios.get(`trending/movie/day`, {\n      params: { page },\n    });\n\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieByName = async (page = 1, query = '') => {\n  try {\n    const { data } = await axios.get(`search/movie`, {\n      params: {\n        page,\n        query,\n      },\n    });\n    console.log(data);\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nexport { getTrendingMovies, getMovieByName };\n"],"names":["MovieListStyled","styled","MovieItem","MoviePoster","MovieTitle","movies","location","useLocation","map","id","title","poster_path","to","state","from","src","alt","useState","trendingMovies","setTrendingMovies","useSearchParams","page","searchParams","setSearchParams","params","useMemo","Object","fromEntries","Number","useEffect","getTrendingMovies","data","results","console","log","message","fetchTrending","style","textShadow","axios","api_key","Error","getMovieByName","query"],"sourceRoot":""}