{"version":3,"file":"static/js/972.a3ab8e92.chunk.js","mappings":"6PAkDA,UA3CgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAoCE,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAuBA,OArBAC,EAAAA,EAAAA,YAAU,WAAM,wCAEd,gHAEuBC,EAAAA,EAAAA,IAAcR,GAFrC,OAEUS,EAFV,QAGUC,EAAUD,EAAKE,QAAQC,MAAK,SAAAC,GAAI,MAAkB,YAAdA,EAAKC,IAAT,KAGpCV,EAAcM,EAAQK,KAEtBC,EAAAA,GAAAA,QAAc,oDARpB,gDAWIC,QAAQC,IAAI,KAAMC,SAXtB,yBAaIb,GAAa,GAbjB,6EAFc,sBACdA,GAAa,GADC,mCAkBdc,EACD,GAAE,CAACpB,KAGF,gCACGK,IAAa,SAAC,IAAD,IACE,KAAfF,IACC,mBACEkB,MAAM,gBACNC,MAAM,MACNC,OAAO,MACPC,IAAG,wCAAmCrB,GACtCsB,iBAAe,KAGnB,SAAC,KAAD,CAAgBC,WAAYC,EAAAA,OAGjC,C,0NC9CDC,EAAAA,EAAAA,SAAAA,QAAA,+BACAA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAQ,oCAGV,IAAMC,EAAiB,mCAAG,WAAMC,GAAN,kGAECH,EAAAA,EAAAA,IAAA,qBAAgC,CACrDI,OAAQ,CAAED,KAAAA,KAHU,uBAEdtB,EAFc,EAEdA,KAFc,kBAMfA,GANe,sCAQhB,IAAIwB,MAAM,4BARM,yDAAH,sDAYjBC,EAAc,mCAAG,WAAMC,GAAN,kGAEIP,EAAAA,EAAAA,IAAA,eAA0B,CAC/CI,OAAQ,CAAEG,MAAAA,KAHO,uBAEX1B,EAFW,EAEXA,KAFW,kBAKZA,GALY,sCAOb,IAAIwB,MAAM,4BAPG,yDAAH,sDAWdG,EAAY,mCAAG,WAAMpC,GAAN,kGAEM4B,EAAAA,EAAAA,IAAA,gBAAmB5B,GAAW,CACnDgC,OAAQ,CACNK,GAAIrC,KAJS,uBAETS,EAFS,EAETA,KAFS,kBAQVA,GARU,sCAUX,IAAIwB,MAAM,4BAVC,yDAAH,sDAcZK,EAAa,mCAAG,WAAMtC,GAAN,kGAEK4B,EAAAA,EAAAA,IAAA,gBAAmB5B,EAAnB,YAAsC,CAC3DgC,OAAQ,CACNK,GAAIrC,KAJU,uBAEVS,EAFU,EAEVA,KAFU,kBAOXA,GAPW,sCASZ,IAAIwB,MAAM,4BATE,yDAAH,sDAabM,EAAe,mCAAG,WAAMvC,GAAN,kGAEG4B,EAAAA,EAAAA,IAAA,gBAAmB5B,EAAnB,YAAsC,CAC3DgC,OAAQ,CACNK,GAAIrC,KAJY,uBAEZS,EAFY,EAEZA,KAFY,kBAObA,GAPa,sCASd,IAAIwB,MAAM,4BATI,yDAAH,sDAafzB,EAAa,mCAAG,WAAMR,GAAN,kGAEK4B,EAAAA,EAAAA,IAAA,gBAAmB5B,EAAnB,WAAqC,CAC1DgC,OAAQ,CACNK,GAAIrC,KAJU,uBAEVS,EAFU,EAEVA,KAFU,kBAOXA,GAPW,sCASZ,IAAIwB,MAAM,4BATE,yDAAH,qD","sources":["components/Trailer/Trailer.jsx","services/themoviedbAPI.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ToastContainer, Slide, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Loader from '../Loader/Loader';\nimport { getMovieVideo } from '../../services/themoviedbAPI.js';\n\nconst Trailer = () => {\n  const { movieId } = useParams();\n  const [trailerUrl, setTrailerUrl] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    async function fetchTrailer() {\n      try {\n        const data = await getMovieVideo(movieId);\n        const trailer = data.results.find(item => item.type === 'Trailer');\n\n        if (trailer) {\n          setTrailerUrl(trailer.key);\n        } else {\n          toast.warning(\"Sorry, we don't have any trailer for this movie.\");\n        }\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchTrailer();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {trailerUrl !== '' && (\n        <iframe\n          title=\"Movie Trailer\"\n          width=\"560\"\n          height=\"315\"\n          src={`https://www.youtube.com/embed/${trailerUrl}`}\n          allowFullScreen\n        ></iframe>\n      )}\n      <ToastContainer transition={Slide} />\n    </>\n  );\n};\n\nexport default Trailer;\n","import axios from 'axios';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\naxios.defaults.params = {\n  api_key: `a06c90b50d50fe78eda7fc28090f9f2b`,\n};\n\nconst getTrendingMovies = async page => {\n  try {\n    const { data } = await axios.get(`trending/movie/day`, {\n      params: { page },\n    });\n\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieByName = async query => {\n  try {\n    const { data } = await axios.get(`search/movie`, {\n      params: { query },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieById = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}`, {\n      params: {\n        id: movieId,\n      },\n    });\n\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMoviesCast = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/credits`, {\n      params: {\n        id: movieId,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieReviews = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/reviews`, {\n      params: {\n        id: movieId,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieVideo = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/videos`, {\n      params: {\n        id: movieId,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nexport {\n  getTrendingMovies,\n  getMovieByName,\n  getMovieById,\n  getMoviesCast,\n  getMovieReviews,\n  getMovieVideo,\n};\n"],"names":["movieId","useParams","useState","trailerUrl","setTrailerUrl","isLoading","setIsLoading","useEffect","getMovieVideo","data","trailer","results","find","item","type","key","toast","console","log","message","fetchTrailer","title","width","height","src","allowFullScreen","transition","Slide","axios","api_key","getTrendingMovies","page","params","Error","getMovieByName","query","getMovieById","id","getMoviesCast","getMovieReviews"],"sourceRoot":""}