{"version":3,"file":"static/js/250.690da737.chunk.js","mappings":"uSAEaA,EAAcC,EAAAA,GAAAA,GAAH,6CAIXC,EAAcD,EAAAA,GAAAA,GAAH,6C,mBC8CxB,EA5CgB,WACd,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAoBC,EAAAA,EAAAA,MAAbC,GAAP,eAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WAAM,wCAGd,8GAEuBC,EAAAA,EAAAA,IAAgBV,GAFvC,OAEUW,EAFV,OAGIP,EAAgBO,EAAKC,SAHzB,gDAKIC,QAAQC,IAAI,KAAMC,SALtB,yBAOIT,GAAa,GAPjB,6EAHc,sBACdA,GAAa,GADC,mCAadU,EACD,GAAE,CAAChB,KAGF,gCACGK,IAAa,SAACY,EAAA,EAAD,IACbT,IACC,UAACX,EAAD,WACGM,EAAae,OAAS,GACrBf,EAAagB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACf,UAACvB,EAAD,YACE,qCAAasB,MACb,uBAAIC,MAFYF,EADH,IAMM,IAAxBjB,EAAae,SACXb,GACDkB,EAAAA,GAAAA,QAAc,0DAGpB,SAAC,KAAD,CAAgBC,WAAYC,EAAAA,OAGjC,C,0NChDDC,EAAAA,EAAAA,SAAAA,QAAA,+BACAA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAQ,oCAGV,IAAMC,EAAiB,mCAAG,WAAMC,GAAN,kGAECH,EAAAA,EAAAA,IAAA,qBAAgC,CACrDI,OAAQ,CAAED,KAAAA,KAHU,uBAEdlB,EAFc,EAEdA,KAFc,kBAMfA,GANe,sCAQhB,IAAIoB,MAAM,4BARM,yDAAH,sDAYjBC,EAAc,mCAAG,WAAMC,GAAN,kGAEIP,EAAAA,EAAAA,IAAA,eAA0B,CAC/CI,OAAQ,CAAEG,MAAAA,KAHO,uBAEXtB,EAFW,EAEXA,KAFW,kBAKZA,GALY,sCAOb,IAAIoB,MAAM,4BAPG,yDAAH,sDAWdG,EAAY,mCAAG,WAAMlC,GAAN,kGAEM0B,EAAAA,EAAAA,IAAA,gBAAmB1B,GAAW,CACnD8B,OAAQ,CACNV,GAAIpB,KAJS,uBAETW,EAFS,EAETA,KAFS,kBAQVA,GARU,sCAUX,IAAIoB,MAAM,4BAVC,yDAAH,sDAcZI,EAAa,mCAAG,WAAMnC,GAAN,kGAEK0B,EAAAA,EAAAA,IAAA,gBAAmB1B,EAAnB,YAAsC,CAC3D8B,OAAQ,CACNV,GAAIpB,KAJU,uBAEVW,EAFU,EAEVA,KAFU,kBAOXA,GAPW,sCASZ,IAAIoB,MAAM,4BATE,yDAAH,sDAabrB,EAAe,mCAAG,WAAMV,GAAN,kGAEG0B,EAAAA,EAAAA,IAAA,gBAAmB1B,EAAnB,YAAsC,CAC3D8B,OAAQ,CACNV,GAAIpB,KAJY,uBAEZW,EAFY,EAEZA,KAFY,kBAObA,GAPa,sCASd,IAAIoB,MAAM,4BATI,yDAAH,sDAafK,EAAa,mCAAG,WAAMpC,GAAN,kGAEK0B,EAAAA,EAAAA,IAAA,gBAAmB1B,EAAnB,WAAqC,CAC1D8B,OAAQ,CACNV,GAAIpB,KAJU,uBAEVW,EAFU,EAEVA,KAFU,kBAOXA,GAPW,sCASZ,IAAIoB,MAAM,4BATE,yDAAH,qD","sources":["components/Reviews/Rewiews.styled.jsx","components/Reviews/Reviews.jsx","services/themoviedbAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\n  margin-top: 15px;\n`;\n\nexport const ReviewsItem = styled.ul`\n  margin-top: 15px;\n`;\n","import { useOutletContext, useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { ToastContainer, Slide, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { getMovieReviews } from '../../services/themoviedbAPI.js';\nimport { ReviewsList, ReviewsItem } from './Rewiews.styled';\nimport Loader from '../Loader/Loader';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [movieReviews, setMovieReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isVisible] = useOutletContext();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    async function fetchReviews() {\n      try {\n        const data = await getMovieReviews(movieId);\n        setMovieReviews(data.results);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {isVisible && (\n        <ReviewsList>\n          {movieReviews.length > 0 &&\n            movieReviews.map(({ id, author, content }) => (\n              <ReviewsItem key={id}>\n                <h4>Author: {author}</h4>\n                <p>{content}</p>\n              </ReviewsItem>\n            ))}\n          {movieReviews.length === 0 &&\n            !isLoading &&\n            toast.warning(\" Sorry, we don't have any reviews for this movies.\")}\n        </ReviewsList>\n      )}\n      <ToastContainer transition={Slide} />\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\naxios.defaults.params = {\n  api_key: `a06c90b50d50fe78eda7fc28090f9f2b`,\n};\n\nconst getTrendingMovies = async page => {\n  try {\n    const { data } = await axios.get(`trending/movie/day`, {\n      params: { page },\n    });\n\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieByName = async query => {\n  try {\n    const { data } = await axios.get(`search/movie`, {\n      params: { query },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieById = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}`, {\n      params: {\n        id: movieId,\n      },\n    });\n\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMoviesCast = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/credits`, {\n      params: {\n        id: movieId,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieReviews = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/reviews`, {\n      params: {\n        id: movieId,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieVideo = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/videos`, {\n      params: {\n        id: movieId,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nexport {\n  getTrendingMovies,\n  getMovieByName,\n  getMovieById,\n  getMoviesCast,\n  getMovieReviews,\n  getMovieVideo,\n};\n"],"names":["ReviewsList","styled","ReviewsItem","movieId","useParams","useState","movieReviews","setMovieReviews","isLoading","setIsLoading","useOutletContext","isVisible","useEffect","getMovieReviews","data","results","console","log","message","fetchReviews","Loader","length","map","id","author","content","toast","transition","Slide","axios","api_key","getTrendingMovies","page","params","Error","getMovieByName","query","getMovieById","getMoviesCast","getMovieVideo"],"sourceRoot":""}