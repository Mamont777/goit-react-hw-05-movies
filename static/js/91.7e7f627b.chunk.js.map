{"version":3,"file":"static/js/91.7e7f627b.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","pages/Movies/Movies.styled.jsx","components/SearchForm/Search.jsx","pages/Movies/Movies.jsx","services/themoviedbAPI.js"],"sourcesContent":["import styled from 'styled-components';\nexport const MovieListStyled = styled.ul`\n  margin: 15px 0 60px 0;\n\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n  justify-content: center;\n`;\n\nexport const MovieItem = styled.li`\n  max-width: 100%;\n  height: 100%;\n  width: 260px;\n  padding: 8px;\n  cursor: pointer;\n  border-radius: 8px;\n  background-color: transparent;\n  border: none;\n  backdrop-filter: blur(3.5px);\n  box-shadow: rgba(0, 0, 0, 0.2) 0px 2px 4px -1px,\n    rgba(0, 0, 0, 0.14) 0px 4px 5px 0px, rgba(0, 0, 0, 0.12) 0px 1px 10px 0px;\n  transform: scale(1);\n  transition: transform 250ms linear 0s;\n  &:hover {\n    box-shadow: rgb(219 22 172 / 89%) 0px 2px 24px -5px;\n    transform: scale(1.05);\n  }\n  img {\n  }\n`;\n\nexport const MoviePoster = styled.img`\n  width: 100%;\n  height: 100%;\n  min-height: 100%;\n  height: 420px;\n  border-radius: 8px;\n\n  transform: scale(1);\n  object-fit: cover;\n  object-position: center center;\n`;\n\nexport const MovieTitle = styled.p`\n  margin-top: 15px;\n  color: whitesmoke;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  :hover {\n    color: orangered;\n  }\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n  MovieListStyled,\n  MovieItem,\n  MoviePoster,\n  MovieTitle,\n} from './MovieList.styled';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <MovieListStyled>\n      {movies.map(({ id, title, poster_path }) => (\n        <MovieItem key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            <MoviePoster\n              src={\n                poster_path\n                  ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                  : 'https://dummyimage.com/395x574/000/fff.jpg&text=no+poster'\n              }\n              alt={`Poster${title}`}\n            />\n            <MovieTitle>{title}</MovieTitle>\n          </Link>\n        </MovieItem>\n      ))}\n    </MovieListStyled>\n  );\n};\nexport default MovieList;\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n    })\n  ),\n};\n","import styled from 'styled-components';\nimport { Field, Form } from 'formik';\n\nexport const SearchBar = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #fff;\n`;\n\nexport const SearchForm = styled(Form)`\n  display: flex;\n  align-items: center;\n  width: 300px;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 9px;\n  overflow: hidden;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n`;\n\nexport const SearchFormInput = styled(Field)`\n  display: inline-block;\n  width: 100%;\n  height: 40px;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding: 0 1rem;\n  padding-left: 2.5rem;\n  background: linear-gradient(\n    180deg,\n    rgb(56 56 56 / 64%) 0%,\n    rgb(36 36 36 / 94%) 66%,\n    rgb(41 41 41 / 83%) 100%\n  );\n  transition: 0.3s ease;\n  border: 2px solid;\n  border-image: conic-gradient(#00f260, #0575e6, #64f38c) 1;\n  color: whitesmoke;\n\n  ::placeholder {\n    font: inherit;\n    font-size: 18px;\n    color: #fff;\n  }\n  :focus::placeholder {\n    color: #999;\n  }\n`;\n\nexport const SearchFormButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 35px;\n  height: 40px;\n  border: 0;\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  background: linear-gradient(\n    180deg,\n    rgb(56 56 56 / 64%) 0%,\n    rgb(36 36 36 / 94%) 66%,\n    rgb(41 41 41 / 83%) 100%\n  );\n  border: 2px solid;\n  border-image: conic-gradient(#00f260, #0575e6, #64f38c) 1;\n  border-radius: 9px;\n\n  :hover {\n    opacity: 1;\n  }\n`;\n\nexport const SearchFormButtonLabel = styled.label`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`;\n","import { useState } from 'react';\nimport { Formik } from 'formik';\nimport { TfiSearch } from 'react-icons/tfi';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {\n  SearchForm,\n  SearchFormInput,\n  SearchFormButton,\n  SearchFormButtonLabel,\n  SearchBar,\n} from '../../pages/Movies/Movies.styled.jsx';\n\nconst notifyOptions = {\n  position: 'top-center',\n  autoClose: 1500,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  theme: 'colored',\n};\n\nconst Search = ({ updateQueryString }) => {\n  const [inputQuery, setInputQuery] = useState('');\n\n  const handleSubmit = () => {\n    if (inputQuery.trim() === '') {\n      return toast.info('Please enter a search query', notifyOptions);\n    }\n    updateQueryString(inputQuery);\n    setInputQuery('');\n  };\n  return (\n    <SearchBar>\n      <Formik initialValues={{ inputQuery: '' }} onSubmit={handleSubmit}>\n        <SearchForm autoComplete=\"off\">\n          <SearchFormButton type=\"submit\">\n            <TfiSearch size=\"25\" />\n            <SearchFormButtonLabel></SearchFormButtonLabel>\n          </SearchFormButton>\n          <SearchFormInput\n            type=\"text\"\n            name=\"inputQuery\"\n            placeholder=\"Search your movie!\"\n            value={inputQuery}\n            onChange={e => setInputQuery(e.target.value)}\n          />\n        </SearchForm>\n      </Formik>\n    </SearchBar>\n  );\n};\n\nexport default Search;\n","//\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMovieByName } from '../../services/themoviedbAPI.js';\nimport MovieList from '../../components/MovieList/MovieList';\nimport Loader from '../../components/Loader/Loader';\nimport Search from '../../components/SearchForm/Search.jsx';\n\nconst Movies = () => {\n  const [foundFilms, setFoundFilms] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query');\n\n  useEffect(() => {\n    if (!searchQuery) return;\n\n    async function fetchMovies() {\n      try {\n        setIsLoading(true);\n        const data = await getMovieByName(searchQuery);\n        setFoundFilms(data.results);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchMovies();\n  }, [searchQuery]);\n\n  const updateQueryString = query => {\n    setSearchParams({ query });\n  };\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <Search updateQueryString={updateQueryString} />\n      {foundFilms.length > 0 && <MovieList movies={foundFilms} />}\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\naxios.defaults.params = {\n  api_key: `a06c90b50d50fe78eda7fc28090f9f2b`,\n};\n\nconst getTrendingMovies = async (page = 1) => {\n  try {\n    const { data } = await axios.get(`trending/movie/day`, {\n      params: { page },\n    });\n\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieByName = async query => {\n  try {\n    const { data } = await axios.get(`search/movie`, {\n      params: { query },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieById = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}`, {\n      params: {\n        id: movieId,\n      },\n    });\n\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMoviesCast = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/credits`, {\n      params: {\n        id: movieId,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieReviews = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/reviews`, {\n      params: {\n        id: movieId,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieVideo = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/videos`, {\n      params: {\n        id: movieId,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nexport {\n  getTrendingMovies,\n  getMovieByName,\n  getMovieById,\n  getMoviesCast,\n  getMovieReviews,\n  getMovieVideo,\n};\n"],"names":["MovieListStyled","styled","MovieItem","MoviePoster","MovieTitle","movies","location","useLocation","map","id","title","poster_path","to","state","from","src","alt","SearchBar","SearchForm","Form","SearchFormInput","Field","SearchFormButton","SearchFormButtonLabel","notifyOptions","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","theme","updateQueryString","useState","inputQuery","setInputQuery","initialValues","onSubmit","trim","toast","autoComplete","type","size","name","placeholder","value","onChange","e","target","foundFilms","setFoundFilms","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","searchQuery","get","useEffect","getMovieByName","data","results","console","log","message","fetchMovies","Loader","query","length","MovieList","axios","api_key","getTrendingMovies","page","params","Error","getMovieById","movieId","getMoviesCast","getMovieReviews","getMovieVideo"],"sourceRoot":""}