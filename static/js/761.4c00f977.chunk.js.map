{"version":3,"file":"static/js/761.4c00f977.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/themoviedbAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  margin-top: 15px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n  justify-content: center;\n`;\nexport const CastItem = styled.li`\n  margin-top: 15px;\n`;\n\nexport const CastDesc = styled.p`\n  margin-top: 15px;\n\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 265px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams, useOutletContext } from 'react-router-dom';\nimport { ToastContainer, Slide, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { getMoviesCast } from '../../services/themoviedbAPI.js';\nimport { CastList, CastItem, CastDesc } from './Cast.styled';\nimport Loader from '../Loader/Loader';\nimport noImage from '../../images/no-image-icon-23505.png';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [movieCast, setMovieCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isVisible] = useOutletContext();\n\n  useEffect(() => {\n    async function fetchCast() {\n      try {\n        setIsLoading(true);\n        const data = await getMoviesCast(movieId);\n        setMovieCast(data.cast);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {isVisible && (\n        <CastList>\n          {movieCast.length > 0 &&\n            movieCast.map(({ id, name, character, profile_path }) => (\n              <CastItem key={id}>\n                <div>\n                  <img\n                    src={\n                      profile_path\n                        ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                        : noImage\n                    }\n                    alt={`Poster ${name}`}\n                    width=\"280\"\n                    height=\"420\"\n                  />\n                </div>\n                <CastDesc>{name}</CastDesc>\n                <CastDesc>Character: {character}</CastDesc>\n              </CastItem>\n            ))}\n          {movieCast.length === 0 &&\n            !isLoading &&\n            toast.warning(\n              \"We don't have any information about cast for this movies.\"\n            )}\n        </CastList>\n      )}\n      <ToastContainer transition={Slide} />\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\naxios.defaults.params = {\n  api_key: `a06c90b50d50fe78eda7fc28090f9f2b`,\n};\n\nconst getTrendingMovies = async (page = 1) => {\n  try {\n    const { data } = await axios.get(`trending/movie/day`, {\n      params: { page },\n    });\n\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieByName = async query => {\n  try {\n    const { data } = await axios.get(`search/movie`, {\n      params: { query },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieById = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}`, {\n      params: {\n        id: movieId,\n      },\n    });\n\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMoviesCast = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/credits`, {\n      params: {\n        id: movieId,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieReviews = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/reviews`, {\n      params: {\n        id: movieId,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieVideo = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/videos`, {\n      params: {\n        id: movieId,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nexport {\n  getTrendingMovies,\n  getMovieByName,\n  getMovieById,\n  getMoviesCast,\n  getMovieReviews,\n  getMovieVideo,\n};\n"],"names":["CastList","styled","CastItem","CastDesc","movieId","useParams","useState","movieCast","setMovieCast","isLoading","setIsLoading","useOutletContext","isVisible","useEffect","getMoviesCast","data","cast","console","log","message","fetchCast","Loader","length","map","id","name","character","profile_path","src","noImage","alt","width","height","toast","transition","Slide","axios","api_key","getTrendingMovies","page","params","Error","getMovieByName","query","getMovieById","getMovieReviews","getMovieVideo"],"sourceRoot":""}