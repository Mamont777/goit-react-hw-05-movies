{"version":3,"file":"static/js/644.80d278ee.chunk.js","mappings":"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","sources":["pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx","helpers/Helpers.jsx","services/themoviedbAPI.js"],"sourcesContent":["import styled from 'styled-components';\nimport { HiArrowLeft } from 'react-icons/hi';\nimport { Link } from 'react-router-dom';\n\nexport const BackLink = ({ to, children }) => {\n  return (\n    <StyledLink to={to}>\n      <HiArrowLeft size=\"24\" />\n      {children}\n    </StyledLink>\n  );\n};\n\nconst StyledLink = styled(Link)`\n  display: flex;\n  -webkit-box-pack: center;\n  justify-content: center;\n  -webkit-box-align: center;\n  align-items: center;\n  margin-bottom: 16px;\n  padding: 8px 16px;\n  width: 100px;\n  border: none;\n  border-radius: 8px;\n  font-size: 12px;\n  color: rgb(255, 255, 255);\n  text-transform: uppercase;\n  text-align: center;\n  background: linear-gradient(\n    141.22deg,\n    rgb(255, 194, 38) 9.4%,\n    rgb(248, 65, 25) 91.91%\n  );\n  box-shadow: rgba(0, 0, 0, 0.2) 0px 2px 4px -1px,\n    rgba(0, 0, 0, 0.14) 0px 4px 5px 0px, rgba(0, 0, 0, 0.12) 0px 1px 10px 0px;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0s;\n  transform: scale(1);\n\n  :hover {\n    transform: scale(0.9);\n  }\n`;\nexport const MovieInfo = styled.div`\n  display: flex;\n  align-items: start;\n  margin-top: 10px;\n`;\n\nexport const MoviePoster = styled.img`\n  width: 300px;\n  border-radius: 8px;\n`;\n\nexport const MovieDescription = styled.div`\n  margin-left: 20px;\n`;\n\nexport const MovieDescriptionItem = styled.li`\n  margin-bottom: 15px;\n`;\n\nexport const Genres = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  gap: 16px;\n`;\n\nexport const Genre = styled.li`\n  background: linear-gradient(141.22deg, #ffc226 9.4%, #f84119 91.91%);\n  color: rgb(0, 0, 0);\n  text-shadow: 0 0.4px 0.4px #fff;\n  font-size: 12px;\n  font-weight: bold;\n  border-radius: 5px;\n  padding: 6px;\n`;\n\nexport const RatingWrapper = styled.div`\n  position: absolute;\n  top: 125px;\n  left: 380px;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: black;\n  color: #ffffff;\n  font-size: 14px;\n\n  &.green {\n    color: green;\n    border: 1px solid green;\n  }\n\n  &.orange {\n    border: 1px solid orange;\n    color: orange;\n  }\n\n  &.red {\n    border: 1px solid red;\n    color: red;\n  }\n`;\n\nexport const Border = styled.div`\n  margin-top: 20px;\n  border-bottom: 1px solid black;\n`;\n\nexport const AdditionalInfo = styled.div`\n  margin-top: 15px;\n`;\n\nexport const AdditionalList = styled.div`\n  display: flex;\n  gap: 20px;\n`;\n\nexport const AdditionalItem = styled.li`\n  margin-top: 15px;\n\n  :hover {\n    color: orangered;\n  }\n`;\n","import { useState, useRef, useEffect, Suspense } from 'react';\nimport { useLocation, useParams, Outlet, Link } from 'react-router-dom';\nimport { Rating } from '@mui/material';\n\nimport { getMovieById } from '../../services/themoviedbAPI.js';\nimport {\n  BackLink,\n  MovieInfo,\n  MoviePoster,\n  MovieDescription,\n  MovieDescriptionItem,\n  Genres,\n  Genre,\n  RatingWrapper,\n  Border,\n  AdditionalInfo,\n  AdditionalList,\n  AdditionalItem,\n} from './MovieDetails.styled';\nimport Loader from '../../components/Loader/Loader';\nimport {\n  getClassByRate,\n  getReleaseYear,\n  formatReleaseDate,\n  formatRuntime,\n} from '../../helpers/Helpers';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState([]);\n  const [isVisible, setIsVisible] = useState(false);\n  const [activeTarget, setActiveTarget] = useState('');\n  const location = useLocation();\n  const backLinkRef = useRef(location.state?.from ?? '/movies');\n\n  useEffect(() => {\n    async function fetchInfo() {\n      try {\n        const data = await getMovieById(movieId);\n        setMovieDetails(data);\n      } catch (error) {\n        console.log(error.message);\n      }\n    }\n    fetchInfo();\n  }, [movieId]);\n\n  const {\n    genres,\n    overview,\n    poster_path,\n    release_date,\n    title,\n    vote_average,\n    status,\n    runtime,\n  } = movieDetails;\n\n  const ratingClass = getClassByRate(vote_average);\n  const releaseYear = getReleaseYear(release_date);\n  const formattedReleaseDate = formatReleaseDate(release_date);\n  const formattedRuntime = formatRuntime(runtime);\n  const showHide = target => {\n    if (isVisible && target === activeTarget) {\n      setIsVisible(false);\n      setActiveTarget('');\n    } else {\n      setIsVisible(true);\n      setActiveTarget(target);\n    }\n  };\n\n  return (\n    <>\n      <BackLink to={backLinkRef.current}>Back</BackLink>\n      <MovieInfo>\n        <MoviePoster\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w500${poster_path}`\n              : 'https://dummyimage.com/395x574/000/fff.jpg&text=no+poster'\n          }\n          alt={`Poster ${title}`}\n          width=\"100%\"\n        />\n        {(vote_average || vote_average > 0) && (\n          <RatingWrapper className={ratingClass}>\n            {vote_average?.toFixed(1)}\n          </RatingWrapper>\n        )}\n        <MovieDescription>\n          <ul>\n            <MovieDescriptionItem>\n              <h2>\n                {title} ({releaseYear})\n              </h2>\n              {(vote_average || vote_average > 0) && (\n                <Rating\n                  name=\"read-only\"\n                  defaultValue={(vote_average / 10) * 5}\n                  precision={0.5}\n                  size=\"large\"\n                  readOnly\n                ></Rating>\n              )}\n              {genres && (\n                <Genres>\n                  {genres.map((genre, index) => (\n                    <Genre key={index}>{genre.name}</Genre>\n                  ))}{' '}\n                </Genres>\n              )}\n            </MovieDescriptionItem>\n            <MovieDescriptionItem>\n              <h3>Overview</h3>\n              <p>{overview}</p>\n            </MovieDescriptionItem>\n            <li>\n              <b style={{ color: 'rgb(255, 66, 8)', fontWeight: 700 }}>\n                Status:{' '}\n              </b>\n              {status}\n            </li>\n            <li>\n              <b style={{ color: 'rgb(255, 66, 8)', fontWeight: 700 }}>\n                Release Date:{' '}\n              </b>\n              {formattedReleaseDate}\n            </li>\n            <li>\n              <b style={{ color: 'rgb(255, 66, 8)', fontWeight: 700 }}>\n                Runtime:{' '}\n              </b>\n              {formattedRuntime}\n            </li>\n          </ul>\n        </MovieDescription>\n      </MovieInfo>\n      <Border />\n      <AdditionalInfo>\n        <h4 style={{ textShadow: '-6px 7px 6px rgba(34,17,153,0.47)' }}>\n          Additional Information\n        </h4>\n        <AdditionalList>\n          <AdditionalItem onClick={() => showHide('cast')}>\n            <Link to=\"cast\">Cast</Link>\n          </AdditionalItem>\n          <AdditionalItem onClick={() => showHide('reviews')}>\n            <Link to=\"reviews\">Reviews</Link>\n          </AdditionalItem>\n          <AdditionalItem onClick={() => showHide('trailer')}>\n            <Link to=\"trailer\">Trailer</Link>\n          </AdditionalItem>\n        </AdditionalList>\n      </AdditionalInfo>\n      <Border />\n      <Suspense fallback={<Loader />}>\n        <Outlet context={[isVisible]} />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import moment from 'moment';\n\nexport function getClassByRate(vote) {\n  if (vote >= 8) {\n    return 'green';\n  } else if (vote > 6) {\n    return 'orange';\n  } else {\n    return 'red';\n  }\n}\nexport function getReleaseYear(releaseDate) {\n  return releaseDate ? releaseDate.slice(0, 4) : '';\n}\n\nexport function formatReleaseDate(releaseDate) {\n  return releaseDate ? moment(releaseDate).format('MMM D, YYYY') : '';\n}\n\nexport function formatRuntime(runtime) {\n  const hours = Math.floor(runtime / 60);\n  const minutes = runtime % 60;\n  return `${hours}h ${minutes}m`;\n}\n","import axios from 'axios';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\naxios.defaults.params = {\n  api_key: `a06c90b50d50fe78eda7fc28090f9f2b`,\n};\n\nconst getTrendingMovies = async (page = 1) => {\n  try {\n    const { data } = await axios.get(`trending/movie/day`, {\n      params: { page },\n    });\n\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieByName = async query => {\n  try {\n    const { data } = await axios.get(`search/movie`, {\n      params: { query },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieById = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}`, {\n      params: {\n        id: movieId,\n      },\n    });\n\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMoviesCast = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/credits`, {\n      params: {\n        id: movieId,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieReviews = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/reviews`, {\n      params: {\n        id: movieId,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieVideo = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/videos`, {\n      params: {\n        id: movieId,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nexport {\n  getTrendingMovies,\n  getMovieByName,\n  getMovieById,\n  getMoviesCast,\n  getMovieReviews,\n  getMovieVideo,\n};\n"],"names":["BackLink","to","children","StyledLink","size","styled","Link","MovieInfo","MoviePoster","MovieDescription","MovieDescriptionItem","Genres","Genre","RatingWrapper","Border","AdditionalInfo","AdditionalList","AdditionalItem","movieId","useParams","useState","movieDetails","setMovieDetails","isVisible","setIsVisible","activeTarget","setActiveTarget","location","useLocation","backLinkRef","useRef","state","from","useEffect","getMovieById","data","console","log","message","fetchInfo","vote","releaseDate","genres","overview","poster_path","release_date","title","vote_average","status","runtime","ratingClass","releaseYear","slice","formattedReleaseDate","moment","format","formatReleaseDate","formattedRuntime","hours","Math","floor","minutes","formatRuntime","showHide","target","current","src","alt","width","className","toFixed","Rating","name","defaultValue","precision","readOnly","map","genre","index","style","color","fontWeight","textShadow","onClick","Suspense","fallback","Loader","context","axios","api_key","getTrendingMovies","page","params","Error","getMovieByName","query","id","getMoviesCast","getMovieReviews","getMovieVideo"],"sourceRoot":""}