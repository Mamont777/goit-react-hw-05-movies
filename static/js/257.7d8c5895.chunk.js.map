{"version":3,"file":"static/js/257.7d8c5895.chunk.js","mappings":"iWAIaA,EAAW,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,SAC7B,OACE,UAACC,EAAD,CAAYF,GAAIA,EAAhB,WACE,SAAC,MAAD,CAAaG,KAAK,OACjBF,IAGN,EAEKC,GAAaE,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,4tBA6BHE,EAAYF,EAAAA,GAAAA,IAAH,sFAMTG,EAAcH,EAAAA,GAAAA,IAAH,gEAKXI,EAAmBJ,EAAAA,GAAAA,IAAH,8CAIhBK,EAAuBL,EAAAA,GAAAA,GAAH,gDAIpBM,EAASN,EAAAA,GAAAA,GAAH,gIAQNO,EAAQP,EAAAA,GAAAA,GAAH,+OAULQ,EAAgBR,EAAAA,GAAAA,IAAH,2dA8BbS,EAAST,EAAAA,GAAAA,IAAH,gFAKNU,EAAiBV,EAAAA,GAAAA,IAAH,6CAIdW,EAAiBX,EAAAA,GAAAA,IAAH,wDAKdY,EAAiBZ,EAAAA,GAAAA,GAAH,uF,UC5F3B,IAgKA,EAhKqB,WAAO,IAAD,IACjBa,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,IAArC,eAAOK,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,YAEnDC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAEuBC,EAAAA,EAAAA,IAAahB,GAFpC,OAEUiB,EAFV,OAGIb,EAAgBa,GAHpB,gDAKIC,QAAQC,IAAI,KAAMC,SALtB,0DADc,uBAAC,WAAD,wBASdC,EACD,GAAE,CAACrB,IAEJ,IA9BsBsB,EA+BpBC,EAQEpB,EARFoB,OACAC,EAOErB,EAPFqB,SACAC,EAMEtB,EANFsB,YACAC,EAKEvB,EALFuB,aACAC,EAIExB,EAJFwB,MACAC,EAGEzB,EAHFyB,aACAC,EAEE1B,EAFF0B,OACAC,EACE3B,EADF2B,QAEIC,EAAcL,EAAeA,EAAaM,MAAM,EAAG,GAAK,GACxDC,GAzCgBX,EAyCaM,IAxCvB,EACH,QACEN,EAAO,EACT,SAEA,MAoCHY,EAAuBR,EACzBS,IAAOT,GAAcU,OAAO,eAC5B,GAMEC,EALoB,SAAAP,GACxB,IAAMQ,EAAQC,KAAKC,MAAMV,EAAU,IAC7BW,EAAUX,EAAU,GAC1B,MAAM,GAAN,OAAUQ,EAAV,aAAoBG,EAApB,IACD,CACwBC,CAAkBZ,GAE3C,OACE,iCACE,SAAChD,EAAD,CAAUC,GAAI4B,EAAYgC,QAA1B,mBACA,UAACtD,EAAD,YACE,SAACC,EAAD,CACEsD,IACEnB,EAAW,yCAC2BA,GAClC,4DAENoB,IAAG,iBAAYlB,GACfmB,MAAM,UAENlB,GAAgBA,EAAe,KAC/B,SAACjC,EAAD,CAAeoD,UAAWd,EAA1B,gBACGL,QADH,IACGA,OADH,EACGA,EAAcoB,QAAQ,MAG3B,SAACzD,EAAD,WACE,2BACE,UAACC,EAAD,YACE,0BACGmC,EADH,KACYI,EADZ,QAGEH,GAAgBA,EAAe,KAC/B,SAACqB,EAAA,EAAD,CACEC,KAAK,YACLC,aAAevB,EAAe,GAAM,EACpCwB,UAAW,GACXlE,KAAK,QACLmE,UAAQ,IAGX9B,IACC,UAAC9B,EAAD,WACG8B,EAAO+B,KAAI,SAACC,EAAOC,GAAR,OACV,SAAC9D,EAAD,UAAoB6D,EAAML,MAAdM,EADF,IAER,WAIV,UAAChE,EAAD,YACE,sCACA,uBAAIgC,QAEN,2BACE,eAAGiC,MAAO,CAAEC,MAAO,kBAAmBC,WAAY,KAAlD,oBACU,OAET9B,MAEH,2BACE,eAAG4B,MAAO,CAAEC,MAAO,kBAAmBC,WAAY,KAAlD,0BACgB,OAEfzB,MAEH,2BACE,eAAGuB,MAAO,CAAEC,MAAO,kBAAmBC,WAAY,KAAlD,qBACW,OAEVtB,cAKT,SAACzC,EAAD,KACA,UAACC,EAAD,YACE,eAAI4D,MAAO,CAAEG,WAAY,qCAAzB,qCAGA,UAAC9D,EAAD,YACE,SAACC,EAAD,CACE8D,QAAS,WACQ,SAAXtD,GAIJD,GAAa,GACbE,EAAU,SAJRF,GAAa,SAAAwD,GAAS,OAAKA,CAAL,GAKzB,EARH,UAUE,SAAC,KAAD,CAAM/E,GAAG,OAAT,qBAEF,SAACgB,EAAD,CACE8D,QAAS,WACQ,YAAXtD,GAIJD,GAAa,GACbE,EAAU,YAJRF,GAAa,SAAAwD,GAAS,OAAKA,CAAL,GAKzB,EARH,UAUE,SAAC,KAAD,CAAM/E,GAAG,UAAT,wBAEF,SAACgB,EAAD,CACE8D,QAAS,WACQ,YAAXtD,GAIJD,GAAa,GACbE,EAAU,YAJRF,GAAa,SAAAwD,GAAS,OAAKA,CAAL,GAKzB,EARH,UAUE,SAAC,KAAD,CAAM/E,GAAG,UAAT,8BAIN,SAACa,EAAD,KACA,SAAC,EAAAmE,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,CAAQC,QAAS,CAAC7D,SAIzB,C,0NC3LD8D,EAAAA,EAAAA,SAAAA,QAAA,+BACAA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAQ,oCAGV,IAAMC,EAAiB,mCAAG,2GAAOC,EAAP,+BAAc,EAAd,kBAECH,EAAAA,EAAAA,IAAA,qBAAgC,CACrDI,OAAQ,CAAED,KAAAA,KAHU,uBAEdrD,EAFc,EAEdA,KAFc,kBAMfA,GANe,sCAQhB,IAAIuD,MAAM,4BARM,yDAAH,qDAYjBC,EAAc,mCAAG,6GAAOH,EAAP,+BAAc,EAAGI,EAAjB,+BAAyB,GAAzB,kBAEIP,EAAAA,EAAAA,IAAA,eAA0B,CAC/CI,OAAQ,CACND,KAAAA,EACAI,MAAAA,KALe,uBAEXzD,EAFW,EAEXA,KAFW,kBASZA,GATY,wCAWb,IAAIuD,MAAM,4BAXG,0DAAH,qDAedxD,EAAY,mCAAG,WAAMhB,GAAN,kGAEMmE,EAAAA,EAAAA,IAAA,gBAAmBnE,GAAW,CACnDuE,OAAQ,CACNI,GAAI3E,KAJS,uBAETiB,EAFS,EAETA,KAFS,kBAQVA,GARU,sCAUX,IAAIuD,MAAM,4BAVC,yDAAH,sDAcZI,EAAa,mCAAG,WAAM5E,GAAN,kGAEKmE,EAAAA,EAAAA,IAAA,gBAAmBnE,EAAnB,YAAsC,CAC3DuE,OAAQ,CACNI,GAAI3E,KAJU,uBAEViB,EAFU,EAEVA,KAFU,kBAOXA,GAPW,sCASZ,IAAIuD,MAAM,4BATE,yDAAH,sDAabK,EAAe,mCAAG,WAAM7E,GAAN,kGAEGmE,EAAAA,EAAAA,IAAA,gBAAmBnE,EAAnB,YAAsC,CAC3DuE,OAAQ,CACNI,GAAI3E,KAJY,uBAEZiB,EAFY,EAEZA,KAFY,kBAObA,GAPa,sCASd,IAAIuD,MAAM,4BATI,yDAAH,sDAafM,EAAa,mCAAG,WAAM9E,GAAN,kGAEKmE,EAAAA,EAAAA,IAAA,gBAAmBnE,EAAnB,WAAqC,CAC1DuE,OAAQ,CACNI,GAAI3E,KAJU,uBAEViB,EAFU,EAEVA,KAFU,kBAOXA,GAPW,sCASZ,IAAIuD,MAAM,4BATE,yDAAH,qD","sources":["pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx","services/themoviedbAPI.js"],"sourcesContent":["import styled from 'styled-components';\nimport { HiArrowLeft } from 'react-icons/hi';\nimport { Link } from 'react-router-dom';\n\nexport const BackLink = ({ to, children }) => {\n  return (\n    <StyledLink to={to}>\n      <HiArrowLeft size=\"24\" />\n      {children}\n    </StyledLink>\n  );\n};\n\nconst StyledLink = styled(Link)`\n  display: flex;\n  -webkit-box-pack: center;\n  justify-content: center;\n  -webkit-box-align: center;\n  align-items: center;\n  margin-bottom: 16px;\n  padding: 8px 16px;\n  width: 100px;\n  border: none;\n  border-radius: 8px;\n  font-size: 12px;\n  color: rgb(255, 255, 255);\n  text-transform: uppercase;\n  text-align: center;\n  background: linear-gradient(\n    141.22deg,\n    rgb(255, 194, 38) 9.4%,\n    rgb(248, 65, 25) 91.91%\n  );\n  box-shadow: rgba(0, 0, 0, 0.2) 0px 2px 4px -1px,\n    rgba(0, 0, 0, 0.14) 0px 4px 5px 0px, rgba(0, 0, 0, 0.12) 0px 1px 10px 0px;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0s;\n  transform: scale(1);\n\n  :hover {\n    transform: scale(0.9);\n  }\n`;\nexport const MovieInfo = styled.div`\n  display: flex;\n  align-items: start;\n  margin-top: 10px;\n`;\n\nexport const MoviePoster = styled.img`\n  width: 300px;\n  border-radius: 8px;\n`;\n\nexport const MovieDescription = styled.div`\n  margin-left: 20px;\n`;\n\nexport const MovieDescriptionItem = styled.li`\n  margin-bottom: 15px;\n`;\n\nexport const Genres = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  gap: 16px;\n`;\n\nexport const Genre = styled.li`\n  background: linear-gradient(141.22deg, #ffc226 9.4%, #f84119 91.91%);\n  color: rgb(0, 0, 0);\n  text-shadow: 0 0.4px 0.4px #fff;\n  font-size: 12px;\n  font-weight: bold;\n  border-radius: 5px;\n  padding: 6px;\n`;\n\nexport const RatingWrapper = styled.div`\n  position: absolute;\n  top: 125px;\n  left: 380px;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: black;\n  color: #ffffff;\n  font-size: 14px;\n\n  &.green {\n    color: green;\n    border: 1px solid green;\n  }\n\n  &.orange {\n    border: 1px solid orange;\n    color: orange;\n  }\n\n  &.red {\n    border: 1px solid red;\n    color: red;\n  }\n`;\n\nexport const Border = styled.div`\n  margin-top: 20px;\n  border-bottom: 1px solid black;\n`;\n\nexport const AdditionalInfo = styled.div`\n  margin-top: 15px;\n`;\n\nexport const AdditionalList = styled.div`\n  display: flex;\n  gap: 20px;\n`;\n\nexport const AdditionalItem = styled.li`\n  margin-top: 15px;\n\n  :hover {\n    color: orangered;\n  }\n`;\n","import { useState, useRef, useEffect, Suspense } from 'react';\nimport { useLocation, useParams, Outlet, Link } from 'react-router-dom';\nimport { Rating } from '@mui/material';\nimport moment from 'moment';\nimport { getMovieById } from '../../services/themoviedbAPI.js';\nimport {\n  BackLink,\n  MovieInfo,\n  MoviePoster,\n  MovieDescription,\n  MovieDescriptionItem,\n  Genres,\n  Genre,\n  RatingWrapper,\n  Border,\n  AdditionalInfo,\n  AdditionalList,\n  AdditionalItem,\n} from './MovieDetails.styled';\nimport Loader from '../../components/Loader/Loader';\n\nfunction getClassByRate(vote) {\n  if (vote >= 8) {\n    return 'green';\n  } else if (vote > 6) {\n    return 'orange';\n  } else {\n    return 'red';\n  }\n}\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState([]);\n  const [isVisible, setIsVisible] = useState(false);\n  const [target, setTarget] = useState('');\n  const location = useLocation();\n  const backLinkRef = useRef(location.state?.from ?? '/movies');\n\n  useEffect(() => {\n    async function fetchInfo() {\n      try {\n        const data = await getMovieById(movieId);\n        setMovieDetails(data);\n      } catch (error) {\n        console.log(error.message);\n      }\n    }\n    fetchInfo();\n  }, [movieId]);\n\n  const {\n    genres,\n    overview,\n    poster_path,\n    release_date,\n    title,\n    vote_average,\n    status,\n    runtime,\n  } = movieDetails;\n  const releaseYear = release_date ? release_date.slice(0, 4) : '';\n  const ratingClass = getClassByRate(vote_average);\n  const formattedReleaseDate = release_date\n    ? moment(release_date).format('MMM D, YYYY')\n    : '';\n  const toHoursAndMinutes = runtime => {\n    const hours = Math.floor(runtime / 60);\n    const minutes = runtime % 60;\n    return `${hours}h ${minutes}m`;\n  };\n  const formattedRuntime = toHoursAndMinutes(runtime);\n\n  return (\n    <>\n      <BackLink to={backLinkRef.current}>Back</BackLink>\n      <MovieInfo>\n        <MoviePoster\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w500${poster_path}`\n              : 'https://dummyimage.com/395x574/000/fff.jpg&text=no+poster'\n          }\n          alt={`Poster ${title}`}\n          width=\"100%\"\n        />\n        {(vote_average || vote_average > 0) && (\n          <RatingWrapper className={ratingClass}>\n            {vote_average?.toFixed(1)}\n          </RatingWrapper>\n        )}\n        <MovieDescription>\n          <ul>\n            <MovieDescriptionItem>\n              <h2>\n                {title} ({releaseYear})\n              </h2>\n              {(vote_average || vote_average > 0) && (\n                <Rating\n                  name=\"read-only\"\n                  defaultValue={(vote_average / 10) * 5}\n                  precision={0.5}\n                  size=\"large\"\n                  readOnly\n                ></Rating>\n              )}\n              {genres && (\n                <Genres>\n                  {genres.map((genre, index) => (\n                    <Genre key={index}>{genre.name}</Genre>\n                  ))}{' '}\n                </Genres>\n              )}\n            </MovieDescriptionItem>\n            <MovieDescriptionItem>\n              <h3>Overview</h3>\n              <p>{overview}</p>\n            </MovieDescriptionItem>\n            <li>\n              <b style={{ color: 'rgb(255, 66, 8)', fontWeight: 700 }}>\n                Status:{' '}\n              </b>\n              {status}\n            </li>\n            <li>\n              <b style={{ color: 'rgb(255, 66, 8)', fontWeight: 700 }}>\n                Release Date:{' '}\n              </b>\n              {formattedReleaseDate}\n            </li>\n            <li>\n              <b style={{ color: 'rgb(255, 66, 8)', fontWeight: 700 }}>\n                Runtime:{' '}\n              </b>\n              {formattedRuntime}\n            </li>\n          </ul>\n        </MovieDescription>\n      </MovieInfo>\n      <Border />\n      <AdditionalInfo>\n        <h4 style={{ textShadow: '-6px 7px 6px rgba(34,17,153,0.47)' }}>\n          Additional Information\n        </h4>\n        <AdditionalList>\n          <AdditionalItem\n            onClick={() => {\n              if (target === 'cast') {\n                setIsVisible(prevState => !prevState);\n                return;\n              }\n              setIsVisible(true);\n              setTarget('cast');\n            }}\n          >\n            <Link to=\"cast\">Cast</Link>\n          </AdditionalItem>\n          <AdditionalItem\n            onClick={() => {\n              if (target === 'reviews') {\n                setIsVisible(prevState => !prevState);\n                return;\n              }\n              setIsVisible(true);\n              setTarget('reviews');\n            }}\n          >\n            <Link to=\"reviews\">Reviews</Link>\n          </AdditionalItem>\n          <AdditionalItem\n            onClick={() => {\n              if (target === 'trailer') {\n                setIsVisible(prevState => !prevState);\n                return;\n              }\n              setIsVisible(true);\n              setTarget('trailer');\n            }}\n          >\n            <Link to=\"trailer\">Trailer</Link>\n          </AdditionalItem>\n        </AdditionalList>\n      </AdditionalInfo>\n      <Border />\n      <Suspense fallback={<Loader />}>\n        <Outlet context={[isVisible]} />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\naxios.defaults.params = {\n  api_key: `a06c90b50d50fe78eda7fc28090f9f2b`,\n};\n\nconst getTrendingMovies = async (page = 1) => {\n  try {\n    const { data } = await axios.get(`trending/movie/day`, {\n      params: { page },\n    });\n\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieByName = async (page = 1, query = '') => {\n  try {\n    const { data } = await axios.get(`search/movie`, {\n      params: {\n        page,\n        query,\n      },\n    });\n\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieById = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}`, {\n      params: {\n        id: movieId,\n      },\n    });\n\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMoviesCast = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/credits`, {\n      params: {\n        id: movieId,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieReviews = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/reviews`, {\n      params: {\n        id: movieId,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nconst getMovieVideo = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/videos`, {\n      params: {\n        id: movieId,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\nexport {\n  getTrendingMovies,\n  getMovieByName,\n  getMovieById,\n  getMoviesCast,\n  getMovieReviews,\n  getMovieVideo,\n};\n"],"names":["BackLink","to","children","StyledLink","size","styled","Link","MovieInfo","MoviePoster","MovieDescription","MovieDescriptionItem","Genres","Genre","RatingWrapper","Border","AdditionalInfo","AdditionalList","AdditionalItem","movieId","useParams","useState","movieDetails","setMovieDetails","isVisible","setIsVisible","target","setTarget","location","useLocation","backLinkRef","useRef","state","from","useEffect","getMovieById","data","console","log","message","fetchInfo","vote","genres","overview","poster_path","release_date","title","vote_average","status","runtime","releaseYear","slice","ratingClass","formattedReleaseDate","moment","format","formattedRuntime","hours","Math","floor","minutes","toHoursAndMinutes","current","src","alt","width","className","toFixed","Rating","name","defaultValue","precision","readOnly","map","genre","index","style","color","fontWeight","textShadow","onClick","prevState","Suspense","fallback","Loader","context","axios","api_key","getTrendingMovies","page","params","Error","getMovieByName","query","id","getMoviesCast","getMovieReviews","getMovieVideo"],"sourceRoot":""}